import os
import re
import time
import logging
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from logging.handlers import RotatingFileHandler

# ==================== CONFIG ====================
BRAVE_PATH = "C:/Program Files/BraveSoftware/Brave-Browser/Application/brave.exe"  # UPDATE
USER_DATA_DIR = "C:/Users/YourUsername/AppData/Local/BraveSoftware/Brave-Browser/User Data"  # UPDATE
PROFILE_DIR = "Default"

BASE_URL = "https://driver.uber.com/earnings/activities"
OUTPUT_DIR = "uber_trips"
os.makedirs(OUTPUT_DIR, exist_ok=True)

LOG_FILE = os.path.join(OUTPUT_DIR, "uber_scraper.log")
LAST_RUN_FILE = os.path.join(OUTPUT_DIR, ".last_run")
NEW_TRIPS_LOG = os.path.join(OUTPUT_DIR, "new_trips.log")

# ==================== SETUP LOGGING ====================
logger = logging.getLogger("UberScraper")
logger.setLevel(logging.DEBUG)

# Prevent duplicate handlers if script is re-run
if not logger.handlers:
    # Console handler (INFO and above)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_format = logging.Formatter('%(asctime)s | %(levelname)-8s | %(message)s', datefmt='%H:%M:%S')
    console_handler.setFormatter(console_format)
    logger.addHandler(console_handler)

    # File handler (DEBUG and above) with rotation
    file_handler = RotatingFileHandler(LOG_FILE, maxBytes=5*1024*1024, backupCount=5, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_format = logging.Formatter('%(asctime)s | %(levelname)-8s | %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    file_handler.setFormatter(file_format)
    logger.addHandler(file_handler)

logger.info("=== UBER TRIP SCRAPER STARTED ===")
logger.debug(f"Output directory: {OUTPUT_DIR}")
logger.debug(f"Log file: {LOG_FILE}")

# ==================== SETUP BRAVE ====================
chrome_options = Options()
chrome_options.binary_location = BRAVE_PATH
chrome_options.add_argument(f"--user-data-dir={USER_DATA_DIR}")
chrome_options.add_argument(f"--profile-directory={PROFILE_DIR}")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-blink-features=AutomationControlled")
chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
chrome_options.add_experimental_option("useAutomationExtension", False)

service = Service(ChromeDriverManager().install())
driver = None
wait = None

def log_new_trip(trip_id, week_folder):
    with open(NEW_TRIPS_LOG, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().isoformat()} | {trip_id} | {week_folder}\n")

def read_last_run():
    if not os.path.exists(LAST_RUN_FILE):
        logger.debug(".last_run file not found â†’ first run")
        return None
    with open(LAST_RUN_FILE, "r") as f:
        ts = f.read().strip()
        logger.debug(f"Last run timestamp: {ts}")
        return ts

def write_last_run():
    ts = datetime.now().isoformat(timespec='seconds')
    with open(LAST_RUN_FILE, "w") as f:
        f.write(ts)
    logger.debug(f"Updated .last_run: {ts}")

# ==================== MAIN ====================
try:
    logger.info("Launching Brave browser with existing profile...")
    driver = webdriver.Chrome(service=service, options=chrome_options)
    wait = WebDriverWait(driver, 20)
    driver.maximize_window()
    logger.debug("Browser launched")

    logger.info(f"Navigating to {BASE_URL}")
    driver.get(BASE_URL)
    time.sleep(6)
    logger.debug("Page loaded")

    # === LOAD ALL TRIPS ===
    logger.info("Starting to load all trips using 'View more' button...")
    view_more_attempts = 0
    while True:
        try:
            view_more = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'View more') or contains(text(), 'Load more')]"))
            )
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", view_more)
            time.sleep(1)
            view_more.click()
            view_more_attempts += 1
            logger.debug(f"Clicked 'View more' (attempt {view_more_attempts})")
            time.sleep(3)
        except Exception as e:
            logger.debug(f"No more 'View more' button after {view_more_attempts} clicks")
            break

    logger.info(f"All trips loaded after {view_more_attempts} 'View more' clicks")

    # === COLLECT TRIP ELEMENTS ===
    trip_elements = driver.find_elements(By.XPATH, "//a[contains(@href, '/trip/')]")
    total_trips = len(trip_elements)
    logger.info(f"Found {total_trips} trip links on the page")

    if total_trips == 0:
        logger.warning("No trips found! Check login or page structure.")
        raise Exception("No trips detected")

    main_window = driver.current_window_handle
    new_count = 0
    skipped_count = 0

    # === PROCESS EACH TRIP ===
    for idx, elem in enumerate(trip_elements):
        href = elem.get_attribute("href")
        trip_id_match = re.search(r'/trip/([a-zA-Z0-9-]+)', href)
        if not trip_id_match:
            logger.warning(f"Could not extract trip ID from href: {href}")
            continue
        trip_id = trip_id_match.group(1)

        # === CHECK IF ALREADY SAVED ===
        already_saved = False
        for root, _, files in os.walk(OUTPUT_DIR):
            if f"{trip_id}.html" in files:
                already_saved = True
                break

        if already_saved:
            skipped_count += 1
            if skipped_count <= 5 or skipped_count % 50 == 0:
                logger.info(f"[{idx+1}/{total_trips}] Skipping (already saved): {trip_id}")
            continue

        # === CLICK TRIP ===
        try:
            driver.execute_script("arguments[0].scrollIntoView({block: 'nearest'});", elem)
            time.sleep(0.5)
            elem.click()
            logger.debug(f"Clicked trip: {trip_id}")
            time.sleep(3)
        except Exception as e:
            logger.error(f"Failed to click trip {trip_id}: {e}")
            continue

        # === SWITCH TO NEW TAB ===
        try:
            new_tab = [wh for wh in driver.window_handles if wh != main_window][-1]
            driver.switch_to.window(new_tab)
            logger.debug("Switched to new trip tab")
        except:
            logger.error(f"Could not switch to new tab for {trip_id}")
            try:
                driver.close()
            except:
                pass
            driver.switch_to.window(main_window)
            continue

        # === WAIT FOR TRIP DETAILS ===
        try:
            wait.until(EC.presence_of_element_located((By.XPATH, "//h1 | //div[contains(text(), 'Trip details')]")))
            time.sleep(2)
            logger.debug("Trip details loaded")
        except Exception as e:
            logger.warning(f"Trip details not fully loaded for {trip_id}: {e}")

        # === EXTRACT DATE ===
        date_text = "Unknown"
        try:
            date_elem = driver.find_element(By.XPATH, "//span[contains(text(), 'Completed on')]/following-sibling::span")
            date_text = date_elem.text.strip()
            logger.debug(f"Date text (Completed on): {date_text}")
        except:
            try:
                date_elem = driver.find_element(By.XPATH, "//div[contains(text(), '202') or contains(text(), 'Jan')][contains(text(), ',')]")
                date_text = " ".join(date_elem.text.split()[:3])
                logger.debug(f"Date text (alternative): {date_text}")
            except:
                logger.warning(f"Could not extract date for {trip_id}, using current date")

        # Parse date
        trip_date = datetime.now()
        for fmt in ("%b %d, %Y", "%B %d, %Y", "%d %b %Y", "%Y-%m-%d"):
            try:
                trip_date = datetime.strptime(date_text.split(" at ")[0].strip(), fmt)
                break
            except:
                continue

        # === CREATE WEEK FOLDER ===
        week_start = trip_date - timedelta(days=trip_date.weekday())
        week_folder = f"{week_start.year}-Week{week_start.isocalendar()[1]:02d}"
        week_path = os.path.join(OUTPUT_DIR, week_folder)
        os.makedirs(week_path, exist_ok=True)
        logger.debug(f"Week folder: {week_folder}")

        # === SAVE HTML ===
        html_path = os.path.join(week_path, f"{trip_id}.html")
        try:
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(driver.page_source)
            logger.info(f"NEW [{new_count+1}] Saved: {week_folder}/{trip_id}.html")
            log_new_trip(trip_id, week_folder)
            new_count += 1
        except Exception as e:
            logger.error(f"Failed to save HTML for {trip_id}: {e}")

        # === CLOSE TAB ===
        try:
            driver.close()
            logger.debug("Closed trip tab")
        except:
            logger.warning("Could not close tab (already closed?)")
        driver.switch_to.window(main_window)
        time.sleep(1)

    # === FINAL SUMMARY ===
    write_last_run()
    logger.info(f"=== SCRAPING COMPLETE ===")
    logger.info(f"Total trips found: {total_trips}")
    logger.info(f"New trips saved: {new_count}")
    logger.info(f"Skipped (already saved): {skipped_count}")
    if new_count == 0:
        logger.info("No new trips since last run.")
    else:
        logger.info(f"Check new files in: {OUTPUT_DIR}")

except Exception as e:
    logger.error(f"FATAL ERROR: {e}", exc_info=True)
finally:
    if driver:
        try:
            driver.quit()
            logger.debug("Browser closed")
        except:
            pass
    logger.info("=== UBER SCRAPER SESSION ENDED ===\n")