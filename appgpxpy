#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from pathlib import Path
from datetime import datetime
import gpxpy, folium, webbrowser
from colorama import init, Fore, Style

init(autoreset=True)

def get_folder() -> Path:
    p = Path(input(Fore.CYAN + "Folder with GPX files: ").strip())
    if not p.is_dir():
        print(Fore.RED + "Not a directory.")
        sys.exit(1)
    return p

def list_gpx_files(folder: Path):
    files = [f for f in folder.iterdir() if f.suffix.lower() == '.gpx']
    if not files:
        print(Fore.YELLOW + "No GPX files.")
        sys.exit(0)
    return files

def safe_date(name: str) -> str | None:
    try:
        d = name.split('_', 1)[0]
        datetime.strptime(d, '%Y-%m-%d')
        return d
    except Exception:
        return None

def select_date(files):
    date_to_file = {}
    for f in files:
        if (d := safe_date(f.name)):
            date_to_file[d] = f

    dates = sorted(date_to_file)
    print(Fore.CYAN + "\nDates:")
    for i, d in enumerate(dates):
        print(f"{Fore.YELLOW}{i}{Style.RESET_ALL}: {d} → {date_to_file[d].name}")

    while True:
        try:
            idx = int(input(Fore.GREEN + "Choose #: "))
            return {"date": dates[idx], "path": date_to_file[dates[idx]]}
        except (ValueError, IndexError):
            print(Fore.RED + "Invalid number.")

def parse_gpx(path: Path):
    with path.open('r', encoding='utf-8') as f:
        return gpxpy.parse(f)

def show_console(gpx):
    print(Fore.MAGENTA + "\n--- Track points ---")
    for track in gpx.tracks:
        for seg in track.segments:
            for p in seg.points:
                print(f"{p.latitude:.6f}, {p.longitude:.6f} -> {p.elevation or '—'}m")

    print(Fore.MAGENTA + "\n--- Waypoints ---")
    for wp in gpx.waypoints:
        print(f"{wp.name} -> {wp.latitude:.6f}, {wp.longitude:.6f}")

def create_map(gpx, output_path: Path):
    # collect coordinates
    pts = []
    for track in gpx.tracks:
        for seg in track.segments:
            pts.extend((p.latitude, p.longitude) for p in seg.points)
    for rte in gpx.routes:
        pts.extend((p.latitude, p.longitude) for p in rte.points)

    if not pts:
        print(Fore.YELLOW + "No geometry to map.")
        return

    # centre & bounds
    lats, lons = zip(*pts)
    centre = [sum(lats)/len(lats), sum(lons)/len(lons)]

    m = folium.Map(location=centre, zoom_start=13, tiles='OpenStreetMap')
    if pts:
        m.fit_bounds([[min(lats), min(lons)], [max(lats), max(lons)]])

    # track
    track_pts = [(p.latitude, p.longitude) for track in gpx.tracks
                 for seg in track.segments for p in seg.points]
    if track_pts:
        folium.PolyLine(track_pts, color='red', weight=3,
                        popup='Track').add_to(m)

    # waypoints
    for wp in gpx.waypoints:
        folium.Marker(
            [wp.latitude, wp.longitude],
            popup=folium.Popup(f"<b>{wp.name}</b><br>Elev: {wp.elevation or '—'}m"),
            icon=folium.Icon(color='green', icon='flag')
        ).add_to(m)

    m.save(str(output_path))
    print(Fore.GREEN + f"Map → {output_path}")

def open_map(path: Path):
    if sys.platform.startswith('win'):
        import os
        os.startfile(str(path))
    else:
        webbrowser.open('file://' + str(path.resolve()))

def main():
    folder = get_folder()
    files  = list_gpx_files(folder)
    sel    = select_date(files)
    gpx    = parse_gpx(sel['path'])
    show_console(gpx)
    map_file = Path("route_map.html")
    create_map(gpx, map_file)
    open_map(map_file)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nCancelled.")
    finally:
        input(Fore.CYAN + "\nPress ENTER to exit…")