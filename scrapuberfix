# scrape_uber_trips.py
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import pandas as pd
import polyline
import json

# === CONFIG: EDIT THESE ===
EMAIL = "your_email@example.com"      # <-- CHANGE
PASSWORD = "your_password"            # <-- CHANGE
OUTPUT_CSV = "uber_trips_full.csv"

# === BRAVE ON WINDOWS ===
brave_path = "C:/Program Files/BraveSoftware/Brave-Browser/Application/brave.exe"

# Chrome options for Brave
options = Options()
options.binary_location = brave_path  # <-- CRITICAL: Points to brave.exe
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option('useAutomationExtension', False)

# Auto-download ChromeDriver (compatible with Brave)
service = Service(ChromeDriverManager().install())

print("Starting Brave with Selenium...")
driver = webdriver.Chrome(service=service, options=options)

# Hide webdriver flag
driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
    "source": "Object.defineProperty(navigator, 'webdriver', {get: () => false});"
})

try:
    print("Logging in to Uber...")
    driver.get("https://auth.uber.com/login/")
    time.sleep(3)

    # Email
    email_input = driver.find_element("name", "userIdentifier")
    email_input.send_keys(EMAIL)
    driver.find_element("css selector", "button[type='submit']").click()
    time.sleep(3)

    # Password
    pwd_input = driver.find_element("name", "password")
    pwd_input.send_keys(PASSWORD)
    driver.find_element("css selector", "button[type='submit']").click()
    time.sleep(8)  # Wait for login + 2FA if needed

    print("Going to Earnings Activities...")
    driver.get("https://drivers.uber.com/earnings/activities")
    time.sleep(5)

    trips = []
    page = 1

    while True:
        print(f"Scraping page {page}...")
        time.sleep(3)

        # Find all trip rows
        rows = driver.find_elements("css selector", "div[data-testid*='activity-row']")
        print(f"Found {len(rows)} trips on this page")

        for row in rows:
            try:
                # Extract visible data
                fare = row.find_element("css selector", "span[data-testid*='fare']").text
                distance = row.find_element("css selector", "span[data-testid*='distance']").text
                time_elem = row.find_element("css selector", "span[data-testid*='time']")
                start_time = time_elem.text

                # Click "View Details"
                detail_btn = row.find_element("css selector", "button")
                driver.execute_script("arguments[0].click();", detail_btn)
                time.sleep(3)

                # === EXTRACT MAP DATA VIA JS ===
                map_data = driver.execute_script("""
                    // Try multiple sources Uber uses
                    const script = document.querySelector('script[type="application/ld+json"]');
                    if (script) {
                        try { return JSON.parse(script.innerText); } catch(e) {}
                    }
                    const map = window.google?.maps;
                    if (map && window.uberTripMap) {
                        const path = window.uberTripMap.getPath().getArray();
                        return { route: path.map(p => [p.lat(), p.lng()]) };
                    }
                    return null;
                """)

                polyline_str = ""
                start_lat, start_lng = None, None
                end_lat, end_lng = None, None

                if map_data:
                    if 'route' in map_data:
                        polyline_str = polyline.encode(map_data['route'])
                    if 'geo' in map_data:
                        start_lat = map_data['geo']['latitude']
                        start_lng = map_data['geo']['longitude']
                    if 'dropoff' in map_data and 'geo' in map_data['dropoff']:
                        end_lat = map_data['dropoff']['geo']['latitude']
                        end_lng = map_data['dropoff']['geo']['longitude']

                trips.append({
                    "start_time": start_time,
                    "fare": fare,
                    "distance": distance,
                    "start_lat": start_lat,
                    "start_lng": start_lng,
                    "end_lat": end_lat,
                    "end_lng": end_lng,
                    "encoded_polyline": polyline_str
                })

                # Go back
                driver.back()
                time.sleep(2)

            except Exception as e:
                print(f"  â†’ Row failed: {e}")
                driver.back()
                time.sleep(1)

        # Next page?
        try:
            next_btn = driver.find_element("css selector", "button[aria-label='Next page']")
            if "disabled" in next_btn.get_attribute("class"):
                break
            driver.execute_script("arguments[0].click();", next_btn)
            time.sleep(3)
            page += 1
        except:
            break

    # Save
    df = pd.DataFrame(trips)
    if not df.empty:
        df["route_points"] = df["encoded_polyline"].apply(
            lambda x: polyline.decode(x) if x else []
        )
    df.to_csv(OUTPUT_CSV, index=False)
    print(f"\nSUCCESS! {len(df)} trips saved to {OUTPUT_CSV}")

except Exception as e:
    print(f"Error: {e}")
finally:
    driver.quit()